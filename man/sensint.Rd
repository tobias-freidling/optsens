% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inference.R
\name{sensint}
\alias{sensint}
\title{Compute Sensitivity Intervals}
\usage{
sensint(
  sa,
  alpha = 0.05,
  boot_procedure = c("perc", "basic", "bca"),
  boot_samples = 1000,
  grid_specs = list(N1 = 100, N2 = 100, N5 = 100),
  eps = 0.001,
  parallel = "no",
  ncpus = getOption("boot.ncpus", 1L)
)
}
\arguments{
\item{sa}{An object of the class \code{sensana}.}

\item{alpha}{Significance level used to construct the sensitivity interval.
Default is \code{0.05} for a \eqn{95\%} sensitivity interval.}

\item{boot_procedure}{A vector of or a single character string specifying
the bootstrap method(s) to construct the sensitivity interval. Accepted
values are \code{"perc"} (percentile), \code{"basic"} (basic), \code{"bca"}
(BCa), \code{"norm"} (normal approximation) and \code{"stud"} (studentized).}

\item{boot_samples}{Integer; the number of bootstrap resamples. Default is \code{1000}.}

\item{grid_specs}{A named list of the three numeric values \code{N1}, \code{N2} and \code{N5} specifying
the number of points considered in the grid search for each of the three dimensions.}

\item{eps}{A small numeric number to bound sensitivity parameters away from \code{1}
and \code{-1}. Default is \code{0.001}.}

\item{parallel}{A character string passed to \code{\link[boot]{boot}}
specifying the parallel processing backend. Options are \code{"no"},
\code{"multicore"}, or \code{"snow"}. Default is \code{"no"}.}

\item{ncpus}{Integer number of CPU cores to use for parallel processing.
Passed to \code{\link[boot]{boot}}.}
}
\value{
Object of the class \code{sensint}. This is a list
containing the following components:
\describe{
\item{sensint}{A data frame where each row contains one sensitivity interval.
The columns \code{sl} and \code{su} refer to the lower and upper end of the respective
sensitivity interval. The column \code{bootstrap} specifies the method used to
construct the interval. The column \code{conservative} indicates whether the
sensitivity interval is conservative or not (see details above).}
\item{alpha}{The significance level.}
\item{n_empty}{The number of bootstrap resamples where the sensitivity model
is empty.}
\item{boot_obj}{The \code{boot} object returned by the internal call to \code{\link[boot:boot]{boot::boot()}}.}
}
}
\description{
Computes a \code{1-alpha} sensitivity interval for the partially identified range
via the bootstrap. Users can specify the bootstrap method(s) used for constructing
the sensitivity interval.
}
\details{
Since the sensitivity model given by the user-specified bounds is data-dependent,
it needs to be re-computed on every bootstrap sample. In cases where the resulting
sensitivity model is empty, we can either discard such a bootstrap sample or set
the estimated PIR to \eqn{(-\infty, \infty)}. In the returned data frame containing
the sensitivity intervals, these 2 possibilities are indicated via \code{conservative = FALSE}
and \code{conservative = TRUE}. We recommend using conservative sensitivity intervals.
}
\examples{
set.seed(123)
u <- rnorm(20)
xt <- -0.25*u + rnorm(20)
xp <- 0.5 * xt + rnorm(20)
z <- 0.25 * xt - xp + u + rnorm(20)
d <- 0.5 * xt + 0.5 * xp + u + 2*z + rnorm(20)
y <- d + 2*xp - xt + z + u + rnorm(20)
sa <- sensana(y = y, d = d, x = data.frame(xt = xt, xp = xp), z = z,
              dep_x = "xt", indep_x = "xp", alpha = 0.05, quantile = "t")

sa <- add_bound(sa, arrow = "UD", kind = "direct", lb = -0.3, ub = 0.3)
sa <- add_bound(sa, arrow = "ZY", kind = "direct", lb = -0.3, ub = 0.3)
                
si <- sensint(sa, alpha = 0.05, boot_procedure = c("perc", "bca"),
              boot_samples = 5000)

}
